--- SimpleNode.java	2006-07-23 10:04:06.000000000 -0400
+++ /home/jpace/src/pmd/src/net/sourceforge/pmd/ast/SimpleNode.java	2006-07-20 08:20:39.000000000 -0400
@@ -1,6 +1,16 @@
 /* Generated By:JJTree: Do not edit this line. SimpleNode.java */
 package net.sourceforge.pmd.ast;
 
+import net.sourceforge.pmd.dfa.IDataFlowNode;
+import net.sourceforge.pmd.jaxen.Attribute;
+import net.sourceforge.pmd.jaxen.DocumentNavigator;
+import net.sourceforge.pmd.symboltable.Scope;
+import org.apache.xerces.dom.DocumentImpl;
+import org.jaxen.BaseXPath;
+import org.jaxen.JaxenException;
+import org.w3c.dom.Document;
+import org.w3c.dom.Element;
+
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
@@ -16,9 +26,19 @@
     protected int endLine;
     protected int beginColumn = -1;
     protected int endColumn;
+    private Scope scope;
     private boolean discardable;
+    private IDataFlowNode dataFlowNode;
 
-    protected Token first, last;
+    public IDataFlowNode getDataFlowNode() {
+        if (this.dataFlowNode == null) {
+            if (this.parent != null) {
+                return ((SimpleNode) parent).getDataFlowNode();
+            }
+            return null; //TODO wise?
+        }
+        return dataFlowNode;
+    }
 
     public void discardIfNecessary() {
         if (discardable) {
@@ -29,6 +49,10 @@
         }
     }
 
+    public void setDataFlowNode(IDataFlowNode dataFlowNode) {
+        this.dataFlowNode = dataFlowNode;
+    }
+
     public void setDiscardable() {
         this.discardable = true;
     }
@@ -46,6 +70,17 @@
         parser = p;
     }
 
+    public void setScope(Scope scope) {
+        this.scope = scope;
+    }
+
+    public Scope getScope() {
+        if (scope == null) {
+            return ((SimpleNode) parent).getScope();
+        }
+        return scope;
+    }
+
     public int getBeginLine() {
         return beginLine;
     }
@@ -208,31 +243,34 @@
         return (children == null) ? 0 : children.length;
     }
 
-    public void jjtOpen() {
-        first = parser.getToken(1);	// new
-        if (beginLine == -1 && parser.token.next != null) {
-            beginLine = parser.token.next.beginLine;
-            beginColumn = parser.token.next.beginColumn;
-        }
+    public String toString(String prefix) {
+        return prefix + toString();
     }
 
-    public void jjtClose() {
-        last = parser.getToken(0);	// new
-        if (beginLine == -1 && (children == null || children.length == 0)) {
-            beginColumn = parser.token.beginColumn;
-        }
-        if (beginLine == -1) {
-            beginLine = parser.token.beginLine;
-        }
-        endLine = parser.token.endLine;
-        endColumn = parser.token.endColumn;
+    public Document asXml() {
+        Document document = new DocumentImpl();
+        appendElement(document);
+        return document;
+    }
+
+    protected void appendElement(org.w3c.dom.Node parentNode) {
+        DocumentNavigator docNav = new DocumentNavigator();
+        Document ownerDocument = parentNode.getOwnerDocument();
+        if (ownerDocument == null) {
+            //If the parentNode is a Document itself, it's ownerDocument is null
+            ownerDocument = (Document) parentNode;
+        }
+        String elementName = docNav.getElementName(this);
+        Element element = ownerDocument.createElement(elementName);
+        parentNode.appendChild(element);
+        for (Iterator iter = docNav.getAttributeAxisIterator(this); iter.hasNext();) {
+            Attribute attr = (Attribute) iter.next();
+            element.setAttribute(attr.getName(), attr.getValue());
+        }
+        for (Iterator iter = docNav.getChildAxisIterator(this); iter.hasNext();) {
+            SimpleNode child = (SimpleNode) iter.next();
+            child.appendElement(element);
     }
-
-    public Token getFirstToken() { return first; } // new
-    public Token getLastToken() { return last; }   // new
-
-    public String toString(String prefix) {
-        return prefix + toString();
     }
 
     /* Override this method if you want to customize how the node dumps
@@ -289,5 +327,8 @@
         return !findChildrenOfType(type).isEmpty();
     }
 
+    public List findChildNodesWithXPath(String xpathString) throws JaxenException {
+        return new BaseXPath(xpathString, new DocumentNavigator()).selectNodes(this);
+    }
 }
 
